# Тестовое задание: Клиент-серверное приложение

Это приложение является реализацией тестового задания с использованием *QML* для графического интерфейса сервера.

1.  *ServerApp* — GUI-приложение на *Qt Quick/QML*, которое управляет подключенными клиентами и отображает их данные.
2.  *ClientApp* — консольное приложение, эмулирующее устройство.

## Технологии

*Язык: C++
*Фреймворк: Qt 6.5.2
*Компоненты Qt: Core, Network, Qml, Quick, Quick Controls
*Сборка: CMake

## Сборка и запуск

### Требования

* Qt 6.5.2 (или новее) с установленными компонентами Qt Quick
* Компилятор C++ (MSVC)
* CMake (версии 3.16 или новее)
* Qt Creator (рекомендуется)

### Сборка в Qt Creator

1.  Откройте Qt Creator.
2.  Выберите `Файл -> Открыть файл или проект...`.
3.  Найдите и выберите корневой файл `CMakeLists.txt` из папки `ClientServerApp`.
4.  Настройте комплект для сборки (убедитесь, что он поддерживает Qt Quick).
5.  Нажмите кнопку "Собрать проект" (`Ctrl+B`).

### Запуск

1.  *Запустите сервер:*
     В Qt Creator выберите `ServerApp` в качестве активного проекта и нажмите "Запустить" (`Ctrl+R`).
     Откроется окно сервера, созданное с помощью QML. Нажмите кнопку "Запустить сервер".

2.  *Запустите одного или нескольких клиентов:**
     В Qt Creator выберите `ClientApp` в качестве активного проекта и нажмите "Запустить".
     Для каждого клиента откроется консоль. Клиенты начнут подключаться к серверу.

## Структура

ClientServerApp/
├── readme.txt
├── CMakeLists.txt         # Корневой CMake-файл
├── ClientApp/
│   ├── CMakeLists.txt
│   ├── main.cpp
│   ├── clientlogic.h
│   └── clientlogic.cpp
└── ServerApp/
    ├── CMakeLists.txt
    ├── main.cpp
    ├── main.qml
	├── universaltable.qml
	├── iclient.h
	├── tcpclient.h
    ├── tcpclient.cpp
    ├── tcpserver.h
    ├── tcpserver.cpp
    ├── serverviewmodel.h
    └── serverviewmodel.cpp